class Player
instance variables

			-- identifier of the player
			private numberID : [nat1];
			-- coordinates of the player's current location
			private position: [Point];
			-- remaining walls that the player can still placed in the map
			private walls : [nat];
			-- row that the player aims to reach in order to complete the objective
			private targetRow : nat := 0;
			-- column that the player aims to reach in order to complete the objective (for 4 players)
			private targetCol : nat := 0;
			-- invariant for the class
			-- target rows and columns can never be bigger than the board and the player walls can never be negative
			inv targetRow <= 17 and targetCol <= 17 and walls >= 0;
			
operations

			-- constructor
			public Player: nat * nat ==> Player
			Player(id, numWalls) ==
			(
				if id = 1
				then (
					position := new Point(1,9);
					targetRow := 17;
					numberID := id;
					walls := numWalls;
				)
				else if id = 2
				then (
					position := new Point(17,9);
					targetRow := 1;
					numberID := id;
					walls := numWalls;
				)
				else if id = 3
				then (
					position := new Point(9,1);
					targetCol := 17;
					numberID := id;
					walls := numWalls;
				)
				else if id = 4
				then (
					position := new Point(9,17);
					targetCol := 1;
					numberID := id;
					walls := numWalls;
				);
			)
			pre id > 0 and id < 5
			post position <> nil and (targetRow <> 0 or targetCol <> 0) and numberID <> nil and (walls = 10 or walls = 5);
			
			-- getting the current position of the player
			public pure getPosition : () ==> Point 
			getPosition() == return position;
			
			-- editing the position of the player
			public setPosition: nat1 * nat1 ==> ()
			setPosition(new_x, new_y) ==
				position := new Point(new_x, new_y)
			post position <> nil;

			-- get the player id
			public pure getPlayerID : () ==> nat1
			getPlayerID() ==
				return numberID
			pre numberID <> nil;
			
			-- set the player targetRow
			public setTargetRow: nat1 ==> ()
			setTargetRow(target) ==
			(
				targetRow := target;
			)
			post targetRow <> 0;
			
			-- set the player targetCol
			public setTargetCol: nat1 ==> ()
			setTargetCol(target) ==
			(
				targetCol := target;
			)
			post targetCol <> 0;
			
			-- retrieves the index of the row the player has to reach
			public pure getTargetRow : () ==> nat
			getTargetRow() == return self.targetRow;
			
			-- retrieves the index of the column the player has to reach
			public pure getTargetCol : () ==> nat
			getTargetCol() == return self.targetCol;

			-- get the number of walls left for the player
			public getWalls : () ==> nat
			getWalls() == return self.walls;
			
			-- decrement the value of walls for the player
			public decWalls : () ==> bool
			decWalls() ==
			(
				if(self.walls > 0)
				then 
				(
					walls := self.walls - 1;
					return true;
				)
				else return false;
			);
			
end Player