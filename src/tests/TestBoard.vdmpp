class TestBoard is subclass of MyTest

instance variables

	private board : [Board] := nil;
	
operations

	public test : () ==> ()
	test() ==
	(
		testConstructor();
		testResetConectivity();
		testPathToDestination();
		testAddWall();
	);
	
	private testConstructor : () ==> ()
	testConstructor() ==
	(
		board := new Board(new Game());
		assertTrue(card(dom board.board) = 289);
		assertEqual(board.board, board.conectivity);
	);

	private testResetConectivity : () ==> ()
	testResetConectivity() ==
	(
		board := new Board(new Game());
		board.conectivity := {|->};
		assertNotEqual(board.board, board.conectivity);
		assertTrue(board.resetConectivity());
		assertEqual(board.board, board.conectivity);
	);
	
	private testPathToDestination: () ==> ()
	testPathToDestination() ==
	(
		board := new Board(new Game(2));
		board.board := board.board ++ {[2,1] |-> <WALL>, [2,3] |-> <WALL>, [2,5] |-> <WALL>, [2,7] |-> <WALL>, [2,9] |-> <WALL>, [2,11] |-> <WALL>, [2,13] |-> <WALL>, [2,15] |-> <WALL>, [3,16] |-> <WALL>, [5,16] |-> <WALL>, [6,17] |-> <NOWALL>};
		assertTrue(board.resetConectivity());
		assertTrue(board.pathToDestination(new Player(1,10), 1, 9));
		assertTrue(board.resetConectivity());
		assertTrue(board.pathToDestination(new Player(2,10), 17, 9));
	);
	
	private testAddWall : () ==> ()
	testAddWall() ==
	(
		board := new Board(new Game(2));
		assertTrue(board.addWall(1,6));
		assertTrue(board.board([1,6]) = <WALL> and board.board([2,6]) = <WALL> and board.board([3,6]) = <WALL>);
		assertFalse(board.addWall(3,6));
		assertTrue(board.board([3,6]) = <WALL> and board.board([4,6]) = <NOWALL> and board.board([5,6]) = <NOWALL>);
		assertTrue(board.addWall(2,7));
		assertTrue(board.board([2,7]) = <WALL> and board.board([2,8]) = <WALL> and board.board([2,9]) = <WALL>);
		assertFalse(board.addWall(1,10));
		assertTrue(board.board([1,10]) = <NOWALL> and board.board([2,10]) = <NOWALL> and board.board([3,10]) = <NOWALL>);
		assertFalse(board.addWall(2,9));
		assertTrue(board.board([2,9]) = <WALL> and board.board([2,10]) = <NOWALL> and board.board([2,11]) = <NOWALL>);
		assertTrue(board.addWall(15,8));
		assertTrue(board.board([15,8]) = <WALL> and board.board([16,8]) = <WALL> and board.board([17,8]) = <WALL>);
		assertTrue(board.addWall(16,9));
		assertTrue(board.board([16,9]) = <WALL> and board.board([16,10]) = <WALL> and board.board([16,11]) = <WALL>);
		assertTrue(board.addWall(16,12));
		assertTrue(board.board([16,12]) = <WALL> and board.board([16,13]) = <WALL> and board.board([16,14]) = <WALL>);
		assertFalse(board.addWall(16,15));
		assertTrue(board.board([16,15]) = <NOWALL> and board.board([16,16]) = <NOWALL> and board.board([16,17]) = <NOWALL>);
		
		-- second attempt
		board := new Board(new Game(2));
		assertTrue(board.addWall(2,1));
		assertTrue(board.board([2,1]) = <WALL> and board.board([2,3]) = <WALL> and board.board([2,5]) = <NOWALL> and board.board([2,6]) = <NOWALL> and board.board([2,7]) = <NOWALL>);
		assertTrue(board.addWall(2,5));
		assertTrue(board.addWall(2,9));
		assertTrue(board.addWall(2,13));
		assertTrue(board.addWall(3,16));
		assertFalse(board.addWall(6,15));
		assertTrue(
			board.board([2,1]) = <WALL> and board.board([2,3]) = <WALL> and board.board([2,5]) = <WALL> and
			board.board([2,7]) = <WALL> and board.board([2,9]) = <WALL> and board.board([2,11]) = <WALL> and
			board.board([2,13]) = <WALL> and board.board([2,15]) = <WALL> and board.board([3,16]) = <WALL> and			
			board.board([5,16]) = <WALL> and board.board([6,15]) = <NOWALL> and board.board([6,17]) = <NOWALL>			
		);
		
	);
	
end TestBoard