class TestBoard is subclass of MyTest

instance variables

	private board : [Board];
	
operations

	public test : () ==> ()
	test() ==
	(
		testConstructor();
		testResetConectivity();
		testAddWall();
		--testMove();
	);
	
	private testConstructor : () ==> ()
	testConstructor() ==
	(
		board := new Board(new Game());
		assertTrue(len board.board = 17);
		assertTrue(forall s in seq board.board & len s = 17);
		assertEqual(board.board, board.conectivity);
	);

	private testResetConectivity : () ==> ()
	testResetConectivity() ==
	(
		board := new Board(new Game());
		board.conectivity := [];
		assertNotEqual(board.board, board.conectivity);
		assertTrue(board.resetConectivity());
		assertEqual(board.board, board.conectivity);
	);
	
	private testAddWall : () ==> ()
	testAddWall() ==
	(
		board := new Board(new Game());
		board.addWall(1,6,[new Player(1),new Player(2)]);
		assertTrue(board.board(1)(6) = <WALL> and board.board(2)(6) = <WALL> and board.board(3)(6) = <WALL>);
		board.addWall(3,6,[new Player(1),new Player(2)]);
		assertTrue(board.board(3)(6) = <WALL> and board.board(4)(6) = <NOWALL> and board.board(5)(6) = <NOWALL>);
		board.addWall(2,7,[new Player(1),new Player(2)]);
		assertTrue(board.board(2)(7) = <WALL> and board.board(2)(8) = <WALL> and board.board(2)(9) = <WALL>);
		board.addWall(1,10,[new Player(1),new Player(2)]);
		assertTrue(board.board(1)(10) = <NOWALL> and board.board(2)(10) = <NOWALL> and board.board(3)(10) = <NOWALL>);
		board.addWall(2,9,[new Player(1),new Player(2)]);
		assertTrue(board.board(2)(9) = <WALL> and board.board(2)(10) = <NOWALL> and board.board(2)(11) = <NOWALL>);
		board.addWall(15,8,[new Player(1),new Player(2)]);
		assertTrue(board.board(15)(8) = <WALL> and board.board(16)(8) = <WALL> and board.board(17)(8) = <WALL>);
		board.addWall(16,9,[new Player(1),new Player(2)]);
		assertTrue(board.board(16)(9) = <WALL> and board.board(16)(10) = <WALL> and board.board(16)(11) = <WALL>);
		board.addWall(16,12,[new Player(1),new Player(2)]);
		assertTrue(board.board(16)(12) = <WALL> and board.board(16)(13) = <WALL> and board.board(16)(14) = <WALL>);
		board.addWall(16,15,[new Player(1),new Player(2)]);
		assertTrue(board.board(16)(15) = <NOWALL> and board.board(16)(16) = <NOWALL> and board.board(16)(17) = <NOWALL>);
	);
	
	private testMove : () ==> ()
	testMove() ==
	(
		dcl game: Game := new Game(),
		b: [Board] := game.getBoard(),
		p1: Player := game.getPlayer(1),
		p2: Player := game.getPlayer(2),
		moves: seq of Point;
		
		IO`println(b);		
		-- normal move case
		game.move(1, 1, game.getPlayer(1));
		assertTrue(b.board(1)(1) = <OCCUPIED> and p1.getPosition().getX() = 1 and p1.getPosition().getY() = 1);
		game.move(3, 3, game.getPlayer(2));
		assertTrue(b.board(3)(3) = <OCCUPIED> and p2.getPosition().getX() = 3 and p2.getPosition().getY() = 3);
		
		-- special move cases
		
		-- player up + wall up
		game.move(5, 9, game.getPlayer(1));
		game.move(3, 9, game.getPlayer(2));
		moves := game.getPossibleMoves();
		assertTrue(len moves = 5);
		
		b.addWall(2, 9, game.getPlayers());
		moves := game.getPossibleMoves();
		assertTrue(len moves = 5);
		
		-- player left + wall left
		game.move(5, 9, game.getPlayer(1));
		game.move(5, 7, game.getPlayer(2));
		moves := game.getPossibleMoves();
		assertTrue(len moves = 4);
		
		b.addWall(5, 6, game.getPlayers());
		moves := game.getPossibleMoves();
		assertTrue(len moves = 5);
		
		-- player right + wall right
		game.move(5, 7, game.getPlayer(1));
		game.move(5, 9, game.getPlayer(2));
		moves := game.getPossibleMoves();
		assertTrue(len moves = 3);
		
		b.addWall(5, 10, game.getPlayers());
		moves := game.getPossibleMoves();
		assertTrue(len moves = 4);
		
		-- player down + wall down
		game.move(3, 9, game.getPlayer(1));
		game.move(5, 9, game.getPlayer(2));
		moves := game.getPossibleMoves();
		assertTrue(len moves = 3);
		
		b.addWall(6, 9, game.getPlayers());
		moves := game.getPossibleMoves();
		assertTrue(len moves = 3);
		
	);
	
end TestBoard