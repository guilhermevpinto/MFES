class Board
	types
	
		-- type representing each area segment of the board
		public Slot = <FREE> | <OCCUPIED> | <VISITED> | <WALL> | <NOWALL>;

	instance variables
	
		private game : Game;
	
		-- the representation of the board
		public static board : seq of seq of Slot := [
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>],
				[<NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>, <NOWALL>],
				[<FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>, <NOWALL>, <FREE>]
			];
			
		-- an auxiliary board to validate logical plays (droping walls)
		public conectivity : seq of seq of Slot;
		
	
	operations
	
		-- constructor
		public Board : Game ==> Board
		Board(gameObj) == 
		(
			conectivity := board;
			game := gameObj;
		)
		post conectivity = board;
		
		-- resets the auxiliar board with the current board status to future path processing, 
		public resetConectivity : () ==> bool
		resetConectivity() == 
		(
			conectivity := board;
			return true;
		)
		post conectivity = board;
		
		-- adds a new wall to the board, if possible
		public addWall : nat1 * nat1 * seq of Player ==> ()
		addWall(row, col, players) == 
		(
			if row mod 2 = 1
			then 
			(
				if col < 18 and row < 16 and board(row)(col) = <NOWALL> and board(row+1)(col) = <NOWALL> and board(row+2)(col) = <NOWALL>
				then
				(
					board(row) := board(row) ++ {col |-> <WALL>};
					board(row+1) := board(row+1) ++ {col |-> <WALL>};
					board(row+2) := board(row+2) ++ {col |-> <WALL>};
					
					if exists1 p in seq players & resetConectivity() and not pathToDestination(p.getTargetRow(), p.getPosition().getX() , p.getPosition().getY())
					then
					(
						board(row) := board(row) ++ {col |-> <NOWALL>};
						board(row+1) := board(row+1) ++ {col |-> <NOWALL>};
						board(row+2) := board(row+2) ++ {col |-> <NOWALL>};
					);
				)
			)
			else
			(
				if col < 16 and row < 18 and board(row)(col) = <NOWALL> and board(row)(col+1) = <NOWALL> and board(row)(col+2) = <NOWALL>
				then
				(
					board(row) := board(row) ++ {col |-> <WALL>, col+1 |-> <WALL>, col+2 |-> <WALL>};
					
					if exists1 p in seq players & resetConectivity() and not pathToDestination(p.getTargetRow(), p.getPosition().getX() , p.getPosition().getY())
					then
					(
						board(row) := board(row) ++ {col |-> <NOWALL>, col+1 |-> <NOWALL>, col+2 |-> <NOWALL>};
					);
				)
			)
		)
		pre row >= 1 and row <= 17 and col >= 1 and col <= 17;
		
		private pathToDestination : nat1 * nat1 * nat1 ==> bool
		pathToDestination(rowDest, row, col) ==
		(
			if row = rowDest
				then return true;
				
			if conectivity(row)(col) = <VISITED>
				then return false;
			
			conectivity(row) := conectivity(row) ++ {col |-> <VISITED>};
		
			if row = 1
			then
			(
				if col = 1
					then return checkRight(rowDest, row, col + 1) or checkDown(rowDest, row + 1, col)
				else if col = 17
					then return checkLeft(rowDest, row, col - 1) or checkDown(rowDest, row + 1, col)
				else return checkLeft(rowDest, row, col - 1) or checkRight(rowDest, row, col + 1) or checkDown(rowDest, row + 1, col)
			);
			
			if row = 17
			then
			(
				if col = 1
					then return checkRight(rowDest, row, col + 1) or checkUp(rowDest, row - 1, col)
				else if col = 17
					then return checkLeft(rowDest, row, col - 1) or checkUp(rowDest, row - 1, col)
				else return checkLeft(rowDest, row, col - 1) or checkRight(rowDest, row, col + 1) or checkUp(rowDest, row - 1, col)
			);
			
			if col = 1
			then return checkRight(rowDest, row, col + 1) or checkUp(rowDest, row - 1, col) or checkDown(rowDest, row + 1, col)
			else if col = 17
			then return checkLeft(rowDest, row, col - 1) or checkUp(rowDest, row - 1, col) or checkDown(rowDest, row + 1, col)
			else return checkLeft(rowDest, row, col - 1) or checkRight(rowDest, row, col + 1) or checkUp(rowDest, row - 1, col) or checkDown(rowDest, row + 1, col);
		)
		pre (rowDest = 1 or rowDest = 17) and row mod 2 = 1 and col mod 2 = 1 and row >= 1 and col >= 1 and row <= 17 and col <= 17;
		
		private checkDown : nat1 * nat1 * nat1 ==> bool
		checkDown(rowDest, row, col) ==
		(
			if conectivity(row)(col) <> <WALL>
				then return pathToDestination(rowDest, row + 1, col)
			else return false;
		);
		
		private checkUp : nat1 * nat1 * nat1 ==> bool
		checkUp(rowDest, row, col) ==
		(
			if conectivity(row)(col) <> <WALL>
				then return pathToDestination(rowDest, row - 1, col)
			else return false;
		);
		
		private checkRight : nat1 * nat1 * nat1 ==> bool
		checkRight(rowDest, row, col) ==
		(
			if conectivity(row)(col) <> <WALL>
				then return pathToDestination(rowDest, row, col + 1)
			else return false;
		);
		
		private checkLeft : nat1 * nat1 * nat1 ==> bool
		checkLeft(rowDest, row, col) ==
		(
			if conectivity(row)(col) <> <WALL>
				then return pathToDestination(rowDest, row, col - 1)
			else return false;
		);
		
		-- Sets the board position as occupied
		public setBoardPosition: Point ==> () 
		setBoardPosition(p) ==
		(
			board(p.getX()) := board(p.getX()) ++ {p.getY() |-> <OCCUPIED>};
		);
		
		-- Sets the occupied board cell back to free
		public unsetBoardPosition: Point ==> ()
		unsetBoardPosition(p) ==
		(
			board(p.getX()) := board(p.getX()) ++ {p.getY() |-> <FREE>}; 
		);
		
functions
			
	
traces
-- TODO Define Combinatorial Test Traces here		
end Board